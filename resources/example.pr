buffalo = defn(start, end,
  ;; buffalo
  let(strings: 1 * 8 repeat("buffalo"),
    idxs: [0, 2, 6],
    f: fn(idx, itm,
      if(idx2 fn(idx2 == idx) some(idxs),
        itm string/capitalize,
        itm
      )
    ), ;; fn
    res: f map-indexed(strings), 
    res println
    " " string/join(res) str(end case(
      period: ".", 
      qmark: "?",
      "!"
    )) ;; res println
  )
)

:period buffalo
buffalo(:qmark)

excited-buffalo = buffalo partial(:exmark)
excited-buffalo()

1 == 2

sum = reduce partial(+)
[1, 2, 3] sum + 1 println

println(
)

test = defn(a: 1,
  a + a
)

+ = sum

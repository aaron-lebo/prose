;; a comment (note: two semicolons and not one unlike Clojure)

;; literals (integer, float, string, regex, keyword, vector, set, list, boolean)

1
1.0
"string" 
#"rege" 
:keyword
[1, 2, 3]
#{:a, :b, :c}
(1, 2, 3)
(,) ;; empty list
(1,) ;; list with one item
(1) ;; the expression 1
true
false
nil

;; hash-maps and pairs

{a: 1, b: 2, c: 3} ;; hash-map
a: 1 ;; a pair, becomes :a 1, symbols on the left side get turned into keywords by default
0: 1 ;; becomes 0 1
"hello": "world" ;; becomes "hello" "world"

;; this behavior is mostly to allow for nice-looking hash maps, default args, etc

;; symbols - like Clojure,a wide variety of identifiers not available in other languages

awesome?
awesome!
so-good
<alright>

;; calls

println(1)
println(1, 2, 3)
if(true, :yes, :no)
my-function("test", test: "this") ;; keyword args, when applicable

;; application - functions can be applied in a way that looks like method invocation or UNIX pipes 

1 println
1 println(2, 3)
true if(:yes, :no)
"test" my-function(test: "this")
1 inc dec println ;; can also be chained

;; newlines - denote multiple expressions, much like Ruby (you can also use semicolons)
;; multiple expressions get wrapped in a Clojure do form except where that is uncessary (let, defn, etc bodies).

true if(:yes,
  :no println
  :no
)
true if(:yes, :no println; :no)

;; operators - symbols which contain only non-alphanumeric characters (currently, any combination of .!$%&*_+=|<>?-)

+
-
*
/
?
!!!
<|>

;; operations - space is imporant 

;; 1+1 is a syntax error, not an operation
1 + 1 ;; this is an operation

;; space between args and operators allows operators to act like symbols in many contexts

sum = reduce partial(+) 
+(1, 2)

;; with a single exception (as we'll see), there's no precedence

1 + 1 * 2 ;; = 4

;; lack of precedence keeps both the implementation and usage simple 
;; use parens to dictate flow

1 + (1 * 2) ;; = 3 

;; assignment - lower precedence than all other operations 
;; translates to (def left right) for all right-hand expressions except for calls 

a = 1 ;; (def a 1)
b = [1, 2, 3] ;; (def b [1 2 3])
c = reduce partial(+) ;; (def c (partial reduce +)

;; = with function/macro/special form calls are essentially syntax sugar, all of thse are the same

fun = defn(x, x + x) 
fun defn(x, x + x) 
defn(fun, x, x + x)

;; if you want to test equality, use ==

0 == 0 ;; becomes (= 0 0)

;; now we know enough to write more complete programs

;; single arg
hello = defn(name,
  "Hello, " str(name)
)

;; no args
hello-hello = defn(
  "Hello" hello
)

;; default/keyword arg
hello-dallas = defn(name: "Dallas",
   name hello
)

;; multiple args and multiple expressions
add = def(x, y,
  let(total: x + y,
      total println
      total
  )
) ;; end def 

1 add(2)
add(1, 2)

;; just to show we can
? = or 
[1] second ? nil ? 1

;; let's test a macro
;; https://clojuredocs.org/clojure.core/defmacro#example-542692d2c026201cdc326f7a

unless = defmacro(pred, a, b,
  `if(~pred not ~a, ~b)
)

;; java and JS interop look normal 

System/getProperties .get("os.name")
java.util.HashMap new .put("a", 1) .put("b", 2)

;; buffalo example from README

buffalo = defn(end,
  let(strings: 1 * 8 repeat("buffalo"),
    idxs: [0, 2, 6],
    f: fn(idx, itm,
      if(idx2 fn(idx2 == idx) some(idxs),
        itm string/capitalize,
        itm
      )
    ),
    res: f map-indexed(strings),
    " " string/join(res) str(end case(
      period: ".",
      qmark: "?",
      "!"
    ))
  )
)

:period buffalo
buffalo(:qmark)

excited-buffalo = buffalo partial(:exmark)
excited-buffalo()

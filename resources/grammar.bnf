program = s? exps s?
<exps> = do | exp
do = exp (<p?> (n+ | <';'>) <p?> exp)+
<exp> =  atom | assignment | operation | comment | !pair exp p? comment
<atom> = symbol | boolean | pair | keyword | number | call | list | group | map | vector | set | regex | string | syntax-quote | unquote
comment = ';;' #'.*'

syntax-quote = '`' atom
unquote = '~' atom 

boolean = 'true' | 'false' | 'nil'
number = digits ('.' digits)?
symbol = '::'? !boolean id
keyword = ':' id
string = quoted
regex = '#' quoted 
<quoted> = '"' #'[^\\"]|\\.'* '"'

assignment = exp <equals> exp 
equals = <p> '=' <p> 
operation = (operation | !pair atom) !(comment | equals | '.') (operator | space) !pair atom 
operator = <p> special <p> 
space = <p>

<id> = '/' | qualified ('/' qualified)?
<qualified> = non-numeric (':'? (non-numeric | digits))*
<digits> = #'[0-9]+'
<non-numeric> = #'[a-zA-Z]+' | special
<special> = ('.' | #'[!$%&*_+=|<>?-]')+

group = lp s? exp? s? rp 
list = lp (comma | s? (exps comma | exps (comma exps)+) s?) rp 
vector = <'['> args <']'>
map = <'{'> args <'}'>
pair = exp <':'> <s> exp !(p? comment)
set = <'#{'> args <'}'>
call = !pair atom lp args rp 
<args> = s? | s? exps (comma exps)* s?
<comma> = s? <','> s?
<lp> = <'('> 
<rp> = <')'>

<s> = (<p?> n <p?> | <p>)+
<p> = #'\p{Blank}+'
n = <'\n'|'\r\n'>

